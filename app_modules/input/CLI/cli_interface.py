import jpype
import jpype.imports
from jpype.types import *
import os
import time
import threading
import queue
from datetime import datetime
import json


class PythonCLIInterface:
    def __init__(self):
        self.data_queue = queue.Queue()
        self.cli_instance = None
        self.java_input_class = None
        self.jvm_started = False

    def start_jvm(self, classpath=None):
        """Start JVM with appropriate classpath"""
        if self.jvm_started:
            print("JVM already started")
            return True

        try:
            classpath = ['cli-app/target/cli-app-0.0.1-SNAPSHOT-jar-with-dependencies.jar']
            jpype.startJVM(classpath=classpath)
            self.jvm_started = True
            print("JVM started successfully")
            return True
        except Exception as e:
            print(f"Failed to start JVM: {e}")
            return False

    def load_cli_class(self):
        """Load the Java CLI class"""
        try:
            print("Loading InputCLI class...")
            self.java_input_class = jpype.JClass("com.malg_acta.cli_app.InputCLI")
            print("InputCLI class loaded successfully")
            return True
        except Exception as e:
            print(f"Failed to load InputCLI class: {e}")
            return False
    def run_cli_interactive(self):
        """Run the Java CLI application interactively"""
        if not self.java_input_class:
            print("CLI class not loaded")
            return None

        try:
            print("Starting Java CLI application...")
            # Call the main method of the Java CLI
            args = jpype.JArray(jpype.JString)([])  # Empty string array for args
            self.java_input_class.main(args)
            print("Java CLI application completed")

            # Try to read the generated JSON file
            return self.read_generated_json()

        except Exception as e:
            print(f"Error running CLI application: {e}")
            import traceback
            traceback.print_exc()
            return None

    def read_generated_json(self, filename='../../../data/output_cli.json'):
        """Read the JSON file generated by the Java CLI"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                print(f"Successfully read generated JSON: {data}")

                # Put data in queue for processing
                self.data_queue.put({
                    'timestamp': datetime.now().isoformat(),
                    'data': data
                })

                return data
            else:
                print(f"JSON file {filename} not found")
                return None
        except Exception as e:
            print(f"Error reading JSON file: {e}")
            return None

    def get_queued_data(self):
        """Get data from the queue (non-blocking)"""
        try:
            return self.data_queue.get_nowait()
        except queue.Empty:
            return None

    def run_interactive_mode(self):
        result = self.run_cli_interactive()
        if result:
            print(f"CLI completed. Result: {result}")

    def shutdown(self):
        """Clean shutdown"""
        if self.jvm_started and jpype.isJVMStarted():
            jpype.shutdownJVM()
            print("JVM shutdown completed")


def main():
    interface = PythonCLIInterface()

    try:
        # Start JVM - adjust classpath as needed for your project structure
        if not interface.start_jvm():
            return

        # Load CLI class
        if not interface.load_cli_class():
            return

        # Run interactive mode
        interface.run_interactive_mode()

    except jpype.JException as je:
        print(f"Java exception occurred: {je}")
        if hasattr(je, 'stacktrace'):
            print(f"Java stack trace: {je.stacktrace()}")
    except Exception as e:
        print(f"Python exception occurred: {e}")
        import traceback
        traceback.print_exc()
    finally:
        interface.shutdown()


if __name__ == "__main__":
    main()